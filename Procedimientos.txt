
CREATE OR REPLACE FUNCTION obtener_facturas()
RETURNS TABLE(
    id INT,
    numero TEXT,
    fecha DATE,
    cliente TEXT,
    total NUMERIC
)
LANGUAGE sql
AS $$
    SELECT f.id, f.numero, f.fecha, c.nombre, f.total
    FROM facturas f
    JOIN clientes c ON f.cliente_id = c.id
    ORDER BY f.fecha DESC;
$$; 


CREATE OR REPLACE FUNCTION obtener_precio_producto(p_id INT)
RETURNS NUMERIC
LANGUAGE sql
AS $$
    SELECT precio FROM productos WHERE id = p_id;
$$;
 

CREATE OR REPLACE FUNCTION obtener_siguiente_numero_factura()
RETURNS BIGINT
LANGUAGE sql
AS $$
    SELECT nextval('factura_numero_seq');
$$; 


CREATE OR REPLACE FUNCTION insertar_factura(
    p_numero TEXT,
    p_cliente_id INT,
    p_total NUMERIC
)
RETURNS INT
LANGUAGE plpgsql
AS $$
DECLARE
    nuevo_id INT;
BEGIN
    INSERT INTO facturas (numero, cliente_id, total)
    VALUES (p_numero, p_cliente_id, p_total)
    RETURNING id INTO nuevo_id;

    RETURN nuevo_id;
END;
$$;

    
CREATE OR REPLACE PROCEDURE insertar_factura_item(
    IN p_factura_id INTEGER,
    IN p_producto_id INTEGER,
    IN p_cantidad NUMERIC,
    IN p_precio NUMERIC,
    IN p_subtotal NUMERIC
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO factura_items (factura_id, producto_id, cantidad, precio, subtotal)
    VALUES (p_factura_id, p_producto_id, p_cantidad, p_precio, p_subtotal);
END;
$$; 


CREATE OR REPLACE FUNCTION obtener_clientes()
RETURNS TABLE(id INT, nombre TEXT)
LANGUAGE sql
AS $$
    SELECT id, nombre FROM clientes ORDER BY nombre;
$$;


CREATE OR REPLACE FUNCTION obtener_productos()
RETURNS TABLE(id INT, nombre TEXT, precio NUMERIC)
LANGUAGE sql
AS $$
    SELECT id, nombre, precio FROM productos ORDER BY nombre;
$$;


CREATE OR REPLACE FUNCTION obtener_factura_por_id(p_id INT)
RETURNS TABLE(
    id INT,
    numero TEXT,
    fecha DATE,
    total NUMERIC,
    cliente_id INT,
    cliente_nombre TEXT,
    cliente_direccion TEXT,
    cliente_telefono TEXT
)
LANGUAGE sql
AS $$
    SELECT f.id, f.numero, f.fecha, f.total,
           c.id, c.nombre, c.direccion, c.telefono
    FROM facturas f
    JOIN clientes c ON f.cliente_id = c.id
    WHERE f.id = p_id;
$$;


CREATE OR REPLACE FUNCTION obtener_items_factura(p_factura_id INT)
RETURNS TABLE(
    id INT,
    producto TEXT,
    cantidad NUMERIC,
    precio NUMERIC,
    subtotal NUMERIC
)
LANGUAGE sql
AS $$
    SELECT fi.id, p.nombre, fi.cantidad, fi.precio, fi.subtotal
    FROM factura_items fi
    JOIN productos p ON fi.producto_id = p.id
    WHERE fi.factura_id = p_factura_id;
$$;


CREATE OR REPLACE PROCEDURE insertar_usuario(
    IN p_username TEXT,
    IN p_email TEXT,
    IN p_password TEXT
)
LANGUAGE plpgsql
AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM usuario WHERE username = p_username OR email = p_email) THEN
        RAISE EXCEPTION 'Usuario con ese nombre o correo ya existe';
    END IF;

    INSERT INTO usuario (username, email, password)
    VALUES (p_username, p_email, p_password);
END;
$$;

CREATE TABLE usuario (
    id SERIAL PRIMARY KEY,
    username TEXT NOT NULL UNIQUE,
    email TEXT NOT NULL UNIQUE,
    password TEXT NOT NULL
);

CREATE OR REPLACE FUNCTION obtener_usuario_por_username(p_username TEXT)
RETURNS TABLE (
    id INT,
    username TEXT,
    password TEXT
)
LANGUAGE sql
AS $$
    SELECT id, username, password
    FROM usuario
    WHERE username = p_username;
$$;
    
